#fastq.info(fastq=WED_Grp1.fastq)
#trim.seqs(fasta=WED_Grp1.fasta, qfile=WED_Grp1.qual, oligos=WED_Grp1_oligos.txt, qaverage=30, keepfirst=250, processors=4)
#fastq.info(fastq=WED_Grp2.fastq)
#trim.seqs(fasta=WED_Grp2.fasta, qfile=WED_Grp2.qual, oligos=WED_Grp2_oligos.txt, qaverage=30, keepfirst=250, processors=4)
#merge.files(input=WED_Grp1.trim.fasta-WED_Grp2.trim.fasta, output=WED1_2.fasta)
#merge.files(input=WED_Grp1.groups-WED_Grp2.groups, output=WED1_2.groups)
#summary.seqs(fasta=WED1_2.fasta)
#system(del WED_Grp1.trim.qual)
#system(del WED_Grp2.trim.qual)
#system(del WED_Grp2.scrap.fasta)
#system(del WED_Grp1.scrap.fasta)
#system(del WED_Grp2.scrap.qual)
#system(del WED_Grp1.scrap.qual)
#system(del WED_Grp2.qual)
#system(del WED_Grp1.qual)
#system(del WED_Grp2.fasta)
#system(del WED_Grp1.fasta)
#unique.seqs(fasta=WED1_2.fasta)
#summary.seqs(fasta=WED1_2.unique.fasta, name=WED1_2.names)
#align.seqs(fasta=WED1_2.unique.fasta, reference=silva.nr_v119.pcr.align, processors=4)
#system(del WED1_2.unique.fasta)
#summary.seqs(fasta=WED1_2.unique.align,name=WED1_2.names)
#screen.seqs(fasta=WED1_2.unique.align, name=WED1_2.names, group=WED1_2.groups, start=2, end=9579, processors=4)
#system(del WED1_2.unique.align)
#summary.seqs(fasta=WED1_2.unique.good.align, name=WED1_2.good.names)
#filter.seqs(fasta=WED1_2.unique.good.align, trump=., vertical=T, processors=4)
#system(del WED1_2.unique.good.align)
#unique.seqs(fasta=WED1_2.unique.good.filter.fasta, name=WED1_2.good.names)
#summary.seqs(fasta=WED1_2.unique.good.filter.unique.fasta, name=WED1_2.unique.good.filter.names)
#pre.cluster(fasta=WED1_2.unique.good.filter.unique.fasta, name=WED1_2.unique.good.filter.names, group=WED1_2.good.groups, diffs=2, processors=4)
#chimera.uchime(fasta=WED1_2.unique.good.filter.unique.precluster.fasta, name=WED1_2.unique.good.filter.unique.precluster.names, group=WED1_2.good.groups, processors=4)
#remove.seqs(accnos=WED1_2.unique.good.filter.unique.precluster.denovo.uchime.accnos, fasta=WED1_2.unique.good.filter.unique.precluster.fasta, name=WED1_2.unique.good.filter.unique.precluster.names, group=WED1_2.good.groups)
#summary.seqs(fasta=WED1_2.unique.good.filter.unique.precluster.pick.fasta, name=WED1_2.unique.good.filter.unique.precluster.pick.names)
#count.groups()
#classify.seqs(fasta=WED1_2.unique.good.filter.unique.precluster.pick.fasta, group=WED1_2.good.pick.groups, name=WED1_2.unique.good.filter.unique.precluster.pick.names, template=silva.nr_v119.align, taxonomy=silva.nr_v119.tax, cutoff=80, processors=4)
#remove.lineage(taxonomy=WED1_2.unique.good.filter.unique.precluster.pick.nr_v119.wang.taxonomy, fasta=WED1_2.unique.good.filter.unique.precluster.pick.fasta, group=WED1_2.good.pick.groups, name=WED1_2.unique.good.filter.unique.precluster.pick.names, taxon=unknown-Chloroplast)
#summary.seqs(fasta=WED1_2.unique.good.filter.unique.precluster.pick.pick.fasta, name=WED1_2.unique.good.filter.unique.precluster.pick.pick.names)
system(ren WED1_2.unique.good.filter.unique.precluster.pick.pick.names WED1_2.final.names)
system(ren WED1_2.unique.good.filter.unique.precluster.pick.pick.fasta WED1_2.final.fasta)
system(ren WED1_2.good.pick.pick.groups WED1_2.final.groups)
#get.groups(group=WED_Grp1.final.groups, groups=Mock, fasta=WED_Grp1.final.fasta, name=WED_Grp1.final.names)
#make.group(fasta=HMP_MOCK.v35.align, groups=MOCK.v35)
#merge.files(input=HMP_MOCK.v35.groups-WED_Grp1.final.pick.groups, output=MOCKMERGE.groups)
#merge.files(input=HMP_MOCK.v35.align-WED_Grp1.final.pick.fasta, output=MOCKMERGE.fasta)
#align.seqs(fasta=MOCKMERGE.fasta, reference=silva.seed_v119.align, processors=4)
#filter.seqs(fasta=MOCKMERGE.align, vertical=T, trump=.)
#get.groups(fasta=MOCKMERGE.filter.fasta, group=MOCKMERGE.groups, groups=Mock)
#system(ren MOCKMERGE.filter.pick.fasta Mock.filter.pick.fasta)
#system(ren MOCKMERGE.pick.groups Mock.pick.groups)
#get.groups(fasta=MOCKMERGE.filter.fasta, group=MOCKMERGE.groups, groups=MOCK.v35)
#system(ren MOCKMERGE.filter.pick.fasta MOCK.v35.filter.pick.fasta)
#system(ren MOCKMERGE.pick.groups MOCK.v35.pick.groups)
#seq.error(fasta=Mock.filter.pick.fasta, name=WED_Grp1.final.pick.names, reference=MOCK.v35.filter.pick.fasta, processors=4)
#remove.groups(fasta=WED_Grp1.final.fasta, group=WED_Grp1.final.groups, groups=Mock, name=WED_Grp1.final.names, taxonomy=WED_Grp1.trim.unique.good.filter.unique.precluster.pick.nr_v119.wang.taxonomy)
dist.seqs(fasta=WED1_2.final.fasta, processors=1)
cluster.split(column=WED1_2.final.dist, name=WED1_2.final.names, large=T)
make.shared(list=WED1_2.final.an.list, group=WED1_2.final.groups, label=0.03)
count.groups()
classify.otu(list=WED1_2.final.an.list, name=WED1_2.final.names, group=WED1_2.final.groups, taxonomy=WED1_2.unique.good.filter.unique.precluster.pick.nr_v119.wang.pick.taxonomy, label=0.03, cutoff=80)
collect.single(shared=WED1_2.final.an.shared)
rarefaction.single(shared=WED1_2.final.an.shared, calc=sobs, freq=100)
summary.single()
heatmap.bin(shared=WED1_2.final.an.shared, scale=log2, numotu=50)
heatmap.sim(calc=jclass-thetayc)
tree.shared(calc=thetayc-jclass)
dist.shared(shared=WED1_2.final.an.shared, calc=thetayc-jclass)
pcoa(phylip=current)
pcoa(phylip=current)
nmds(phylip=current)
nmds(phylip=current)

